{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for the <code>nrl-sdk</code>","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This documentation provides an overview of the <code>nrl-sdk</code>, a Python library designed to facilitate interactions with the Norwegian Registry of Aviation Obstacles (NRL) APIs. The SDK includes models for handling Coordinate Reference Systems (CRS), geometries, feature collections, jobs, and results.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#nrl_sdk_lib.models.crs","title":"<code>nrl_sdk_lib.models.crs</code>","text":"<p>Module for a simplified feature collection model.</p>"},{"location":"reference/#nrl_sdk_lib.models.crs.Parent","title":"<code>Parent</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A base model for all other models.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/crs.py</code> <pre><code>class Parent(BaseModel):\n    \"\"\"A base model for all other models.\"\"\"\n\n    model_config = ConfigDict(\n        alias_generator=to_camel,\n        populate_by_name=True,\n        extra=\"forbid\",  # Forbid extra fields\n    )\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.crs.CrsProperties","title":"<code>CrsProperties</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A CRS properties model.</p> <p>The CrsProperties model represents the properties of a Coordinate Reference System (CRS).</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the CRS.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/crs.py</code> <pre><code>class CrsProperties(Parent):\n    \"\"\"A CRS properties model.\n\n    The CrsProperties model represents the properties of a Coordinate Reference System (CRS).\n\n    Attributes:\n        name (str): The name of the CRS.\n\n    \"\"\"\n\n    name: str\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.crs.Crs","title":"<code>Crs</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A CRS model.</p> <p>The Crs model represents a Coordinate Reference System (CRS) with its properties.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of CRS, typically \"name\".</p> <code>properties</code> <code>CrsProperties</code> <p>The properties of the CRS.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/crs.py</code> <pre><code>class Crs(Parent):\n    \"\"\"A CRS model.\n\n    The Crs model represents a Coordinate Reference System (CRS) with its properties.\n\n    Attributes:\n        type (str): The type of CRS, typically \"name\".\n        properties (CrsProperties): The properties of the CRS.\n\n    \"\"\"\n\n    model_config = ConfigDict(\n        extra=\"forbid\",  # Forbid extra fields\n    )\n\n    type: str = \"name\"\n    properties: CrsProperties\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.geometry","title":"<code>nrl_sdk_lib.models.geometry</code>","text":"<p>Module for a simplified feature collection model.</p>"},{"location":"reference/#nrl_sdk_lib.models.geometry.Parent","title":"<code>Parent</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A base model for all other models.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/geometry.py</code> <pre><code>class Parent(BaseModel):\n    \"\"\"A base model for all other models.\"\"\"\n\n    model_config = ConfigDict(\n        alias_generator=to_camel,\n        populate_by_name=True,\n        extra=\"forbid\",  # Forbid extra fields\n    )\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.geometry.Geometry","title":"<code>Geometry</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A Geometry model.</p> <p>The Geometry model serves as a base class for different geometry types such as Point, Polygon, and LineString.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>Literal['Point', 'Polygon', 'LineString']</code> <p>The type of geometry</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/geometry.py</code> <pre><code>class Geometry(Parent):\n    \"\"\"A Geometry model.\n\n    The Geometry model serves as a base class for different geometry types such as Point, Polygon, and LineString.\n\n    Attributes:\n        type (Literal[\"Point\", \"Polygon\", \"LineString\"]): The type of geometry\n\n    \"\"\"\n\n    model_config = ConfigDict(\n        extra=\"forbid\",  # Forbid extra fields\n    )\n\n    type: Literal[\"Point\", \"Polygon\", \"LineString\"]\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.geometry.Point","title":"<code>Point</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Geometry</code></p> <p>A Point geometry model.</p> <p>The Point model represents a single point in a two-dimensional space.</p> <p>Attributes:</p> Name Type Description <code>coordinates</code> <code>list[float]</code> <p>A list of two floats representing the x and y coordinates of the point.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/geometry.py</code> <pre><code>class Point(Geometry):\n    \"\"\"A Point geometry model.\n\n    The Point model represents a single point in a two-dimensional space.\n\n    Attributes:\n        coordinates (list[float]): A list of two floats representing the x and y coordinates of the point.\n\n    \"\"\"\n\n    coordinates: list[float]\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.geometry.Polygon","title":"<code>Polygon</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Geometry</code></p> <p>A Polygon geometry model.</p> <p>The Polygon model represents a polygon defined by a list of linear rings, where each ring is a list of points.</p> <p>Attributes:</p> Name Type Description <code>coordinates</code> <code>list[list[list[float]]]</code> <p>A list of linear rings, where each ring is a list of points, and each point is represented by a list of two floats (x, y).</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/geometry.py</code> <pre><code>class Polygon(Geometry):\n    \"\"\"A Polygon geometry model.\n\n    The Polygon model represents a polygon defined by a list of linear rings, where each ring is a list of points.\n\n    Attributes:\n        coordinates (list[list[list[float]]]): A list of linear rings, where each ring is a list of points,\n            and each point is represented by a list of two floats (x, y).\n\n    \"\"\"\n\n    coordinates: list[list[list[float]]]\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.geometry.LineString","title":"<code>LineString</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Geometry</code></p> <p>A LineString geometry model.</p> <p>The LineString model represents a sequence of points connected by straight lines.</p> <p>Attributes:</p> Name Type Description <code>coordinates</code> <code>list[list[float]]</code> <p>A list of points, where each point is represented by a list of two floats (x, y).</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/geometry.py</code> <pre><code>class LineString(Geometry):\n    \"\"\"A LineString geometry model.\n\n    The LineString model represents a sequence of points connected by straight lines.\n\n    Attributes:\n        coordinates (list[list[float]]): A list of points, where each point is represented by a list of two floats (x, y).\n\n    \"\"\"\n\n    coordinates: list[list[float]]\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection","title":"<code>nrl_sdk_lib.models.feature_collection</code>","text":"<p>Module for a simplified feature collection model.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Parent","title":"<code>Parent</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A base model for all other models.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class Parent(BaseModel):\n    \"\"\"A base model for all other models.\"\"\"\n\n    model_config = ConfigDict(\n        alias_generator=to_camel,\n        populate_by_name=True,\n        extra=\"forbid\",  # Forbid extra fields\n    )\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.FeatureStatus","title":"<code>FeatureStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for feature property statuses.</p> <p>This enumeration defines the possible statuses for feature properties in the NRL.</p> <p>Attributes:</p> Name Type Description <code>eksisterende</code> <code>str</code> <p>Represents an existing feature.</p> <code>fjernet</code> <code>str</code> <p>Represents a feature that has been removed.</p> <code>planlagt_fjernet</code> <code>str</code> <p>Represents a feature that is planned to be removed.</p> <code>planlagt_oppf\u00f8rt</code> <code>str</code> <p>Represents a feature that is planned to be constructed.</p> <code>erstattet</code> <code>str</code> <p>Represents a feature that has been replaced.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class FeatureStatus(str, Enum):\n    \"\"\"An enumeration for feature property statuses.\n\n    This enumeration defines the possible statuses for feature properties in the NRL.\n\n    Attributes:\n        eksisterende (str): Represents an existing feature.\n        fjernet (str): Represents a feature that has been removed.\n        planlagt_fjernet (str): Represents a feature that is planned to be removed.\n        planlagt_oppf\u00f8rt (str): Represents a feature that is planned to be constructed.\n        erstattet (str): Represents a feature that has been replaced.\n\n    \"\"\"\n\n    eksisterende = \"eksisterende\"\n    fjernet = \"fjernet\"\n    planlagt_fjernet = \"planlagtFjernet\"\n    planlagt_oppf\u00f8rt = \"planlagtOppf\u00f8rt\"\n    erstattet = \"erstattet\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftfartsHinderMerking","title":"<code>LuftfartsHinderMerking</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for luftfartshindermerking.</p> <p>This enumeration defines the possible markings for aviation obstacles.</p> <p>Attributes:</p> Name Type Description <code>fargermerking</code> <code>str</code> <p>Represents color marking.</p> <code>mark\u00f8r</code> <code>str</code> <p>Represents a marker.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class LuftfartsHinderMerking(str, Enum):\n    \"\"\"An enumeration for luftfartshindermerking.\n\n    This enumeration defines the possible markings for aviation obstacles.\n\n    Attributes:\n        fargermerking (str): Represents color marking.\n        mark\u00f8r (str): Represents a marker.\n\n    \"\"\"\n\n    fargermerking = \"fargemerking\"\n    mark\u00f8r = \"mark\u00f8r\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftfartsHinderLyssetting","title":"<code>LuftfartsHinderLyssetting</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for luftfartshinderlyssetting.</p> <p>This enumeration defines the possible lighting settings for aviation obstacles.</p> <p>Attributes:</p> Name Type Description <code>belyst_med_flomlys</code> <code>str</code> <p>Represents lighting with floodlights.</p> <code>blinkende_hvitt</code> <code>str</code> <p>Represents blinking white lights.</p> <code>blinkende_r\u00f8dt</code> <code>str</code> <p>Represents blinking red lights.</p> <code>fast_hvitt</code> <code>str</code> <p>Represents steady white lights.</p> <code>fast_r\u00f8dt</code> <code>str</code> <p>Represents steady red lights.</p> <code>h\u00f8yintensitet_type_a</code> <code>str</code> <p>Represents high-intensity type A lighting.</p> <code>h\u00f8yintensitet_type_b</code> <code>str</code> <p>Represents high-intensity type B lighting.</p> <code>lavintensitet_type_a</code> <code>str</code> <p>Represents low-intensity type A lighting.</p> <code>lavintensitet_type_b</code> <code>str</code> <p>Represents low-intensity type B lighting.</p> <code>lyssatt</code> <code>str</code> <p>Represents illuminated features.</p> <code>mellomintensitet_type_a</code> <code>str</code> <p>Represents medium-intensity type A lighting.</p> <code>mellomintensitet_type_b</code> <code>str</code> <p>Represents medium-intensity type B lighting.</p> <code>mellomintensitet_type_c</code> <code>str</code> <p>Represents medium-intensity type C lighting.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class LuftfartsHinderLyssetting(str, Enum):\n    \"\"\"An enumeration for luftfartshinderlyssetting.\n\n    This enumeration defines the possible lighting settings for aviation obstacles.\n\n    Attributes:\n        belyst_med_flomlys (str): Represents lighting with floodlights.\n        blinkende_hvitt (str): Represents blinking white lights.\n        blinkende_r\u00f8dt (str): Represents blinking red lights.\n        fast_hvitt (str): Represents steady white lights.\n        fast_r\u00f8dt (str): Represents steady red lights.\n        h\u00f8yintensitet_type_a (str): Represents high-intensity type A lighting.\n        h\u00f8yintensitet_type_b (str): Represents high-intensity type B lighting.\n        lavintensitet_type_a (str): Represents low-intensity type A lighting.\n        lavintensitet_type_b (str): Represents low-intensity type B lighting.\n        lyssatt (str): Represents illuminated features.\n        mellomintensitet_type_a (str): Represents medium-intensity type A lighting.\n        mellomintensitet_type_b (str): Represents medium-intensity type B lighting.\n        mellomintensitet_type_c (str): Represents medium-intensity type C lighting.\n\n    \"\"\"\n\n    belyst_med_flomlys = \"belystMedFlomlys\"\n    blinkende_hvitt = \"blinkendeHvitt\"\n    blinkende_r\u00f8dt = \"blinkendeR\u00f8dt\"\n    fast_hvitt = \"fastHvitt\"\n    fast_r\u00f8dt = \"fastR\u00f8dt\"\n    h\u00f8yintensitet_type_a = \"h\u00f8yintensitetTypeA\"\n    h\u00f8yintensitet_type_b = \"h\u00f8yintensitetTypeB\"\n    lavintensitet_type_a = \"lavintensitetTypeA\"\n    lavintensitet_type_b = \"lavintensitetTypeB\"\n    lyssatt = \"lyssatt\"\n    mellomintensitet_type_a = \"mellomintensitetTypeA\"\n    mellomintensitet_type_b = \"mellomintensitetTypeB\"\n    mellomintensitet_type_c = \"mellomintensitetTypeC\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.H\u00f8ydereferanse","title":"<code>H\u00f8ydereferanse</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for height references.</p> <p>This enumeration defines the possible height references used in the NRL.</p> <p>Attributes:</p> Name Type Description <code>fot</code> <code>str</code> <p>Represents height at the bottom.</p> <code>topp</code> <code>str</code> <p>Represents height at the top.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class H\u00f8ydereferanse(str, Enum):\n    \"\"\"An enumeration for height references.\n\n    This enumeration defines the possible height references used in the NRL.\n\n    Attributes:\n        fot (str): Represents height at the bottom.\n        topp (str): Represents height at the top.\n\n    \"\"\"\n\n    fot = \"fot\"\n    topp = \"topp\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType","title":"<code>PunktType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for punkt types.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class PunktType(str, Enum):\n    \"\"\"An enumeration for punkt types.\"\"\"\n\n    annet = \"annet\"\n    \"\"\"A generic point type.\"\"\"\n\n    bygning = \"bygning\"\n    \"\"\"A point representing a building.\"\"\"\n\n    flaggstang = \"flaggstang\"\n    \"\"\"A point representing a flagpole.\"\"\"\n\n    forankret_ballong = \"forankretBallong\"\n    \"\"\"A point representing an anchored balloon.\"\"\"\n\n    forn\u00f8yelsesparkinnretning = \"forn\u00f8yelsesparkinnretning\"\n    \"\"\"A point representing an amusement park attraction.\"\"\"\n\n    fyrt\u00e5rn = \"fyrt\u00e5rn\"\n    \"\"\"A point representing a lighthouse.\"\"\"\n\n    hoppt\u00e5rn = \"hoppt\u00e5rn\"\n    \"\"\"A point representing a ski jump tower.\"\"\"\n\n    kj\u00f8let\u00e5rn = \"kj\u00f8let\u00e5rn\"\n    \"\"\"A point representing a cooling tower.\"\"\"\n\n    kontrollt\u00e5rn = \"kontrollt\u00e5rn\"\n    \"\"\"A point representing a control tower.\"\"\"\n\n    kraftverk = \"kraftverk\"\n    \"\"\"A point representing a power plant.\"\"\"\n\n    kran = \"kran\"\n    \"\"\"A point representing a crane.\"\"\"\n\n    kuppel = \"kuppel\"\n    \"\"\"A point representing a dome.\"\"\"\n\n    monument = \"monument\"\n    \"\"\"A point representing a monument.\"\"\"\n\n    navigasjonshjelpemiddel = \"navigasjonshjelpemiddel\"\n    \"\"\"A point representing a navigation aid.\"\"\"\n\n    petroleumsinnretning = \"petroleumsinnretning\"\n    \"\"\"A point representing a petroleum installation.\"\"\"\n\n    pipe = \"pipe\"\n    \"\"\"A point representing a chimney.\"\"\"\n\n    raffineri = \"raffineri\"\n    \"\"\"A point representing a refinery.\"\"\"\n\n    silo = \"silo\"\n    \"\"\"A point representing a silo.\"\"\"\n\n    sprengningst\u00e5rn = \"sprengningst\u00e5rn\"\n    \"\"\"A point representing a blasting tower.\"\"\"\n\n    tank = \"tank\"\n    \"\"\"A point representing a tank.\"\"\"\n\n    t\u00e5rn = \"t\u00e5rn\"\n    \"\"\"A point representing a tower.\"\"\"\n\n    vannt\u00e5rn = \"vannt\u00e5rn\"\n    \"\"\"A point representing a water tower.\"\"\"\n\n    vindturbin = \"vindturbin\"\n    \"\"\"A point representing a wind turbine.\"\"\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.annet","title":"<code>annet = 'annet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A generic point type.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.bygning","title":"<code>bygning = 'bygning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a building.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.flaggstang","title":"<code>flaggstang = 'flaggstang'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a flagpole.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.forankret_ballong","title":"<code>forankret_ballong = 'forankretBallong'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing an anchored balloon.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.forn\u00f8yelsesparkinnretning","title":"<code>forn\u00f8yelsesparkinnretning = 'forn\u00f8yelsesparkinnretning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing an amusement park attraction.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.fyrt\u00e5rn","title":"<code>fyrt\u00e5rn = 'fyrt\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a lighthouse.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.hoppt\u00e5rn","title":"<code>hoppt\u00e5rn = 'hoppt\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a ski jump tower.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.kj\u00f8let\u00e5rn","title":"<code>kj\u00f8let\u00e5rn = 'kj\u00f8let\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a cooling tower.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.kontrollt\u00e5rn","title":"<code>kontrollt\u00e5rn = 'kontrollt\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a control tower.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.kraftverk","title":"<code>kraftverk = 'kraftverk'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a power plant.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.kran","title":"<code>kran = 'kran'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a crane.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.kuppel","title":"<code>kuppel = 'kuppel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a dome.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.monument","title":"<code>monument = 'monument'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a monument.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.navigasjonshjelpemiddel","title":"<code>navigasjonshjelpemiddel = 'navigasjonshjelpemiddel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a navigation aid.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.petroleumsinnretning","title":"<code>petroleumsinnretning = 'petroleumsinnretning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a petroleum installation.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.pipe","title":"<code>pipe = 'pipe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a chimney.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.raffineri","title":"<code>raffineri = 'raffineri'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a refinery.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.silo","title":"<code>silo = 'silo'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a silo.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.sprengningst\u00e5rn","title":"<code>sprengningst\u00e5rn = 'sprengningst\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a blasting tower.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.tank","title":"<code>tank = 'tank'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a tank.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.t\u00e5rn","title":"<code>t\u00e5rn = 't\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a tower.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.vannt\u00e5rn","title":"<code>vannt\u00e5rn = 'vannt\u00e5rn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a water tower.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.PunktType.vindturbin","title":"<code>vindturbin = 'vindturbin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A point representing a wind turbine.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale","title":"<code>Materiale</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for materials.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class Materiale(str, Enum):\n    \"\"\"An enumeration for materials.\"\"\"\n\n    annet = \"annet\"\n    \"\"\"Generic material type.\"\"\"\n\n    betong = \"betong\"\n    \"\"\"Concrete material.\"\"\"\n\n    glass = \"glass\"\n    \"\"\"Glass material.\"\"\"\n\n    metall = \"metall\"\n    \"\"\"Metal material.\"\"\"\n\n    murstein = \"murstein\"\n    \"\"\"Brick material.\"\"\"\n\n    stein = \"stein\"\n    \"\"\"Stone material.\"\"\"\n\n    trevirke = \"trevirke\"\n    \"\"\"Wood material.\"\"\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.annet","title":"<code>annet = 'annet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Generic material type.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.betong","title":"<code>betong = 'betong'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Concrete material.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.glass","title":"<code>glass = 'glass'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Glass material.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.metall","title":"<code>metall = 'metall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Metal material.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.murstein","title":"<code>murstein = 'murstein'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Brick material.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.stein","title":"<code>stein = 'stein'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Stone material.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Materiale.trevirke","title":"<code>trevirke = 'trevirke'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Wood material.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.DatafangsMetode","title":"<code>DatafangsMetode</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for data capture methods.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class DatafangsMetode(str, Enum):\n    \"\"\"An enumeration for data capture methods.\"\"\"\n\n    dig = \"dig\"\n    fot = \"fot\"\n    gen = \"gen\"\n    lan = \"lan\"\n    pla = \"pla\"\n    sat = \"sat\"\n    byg = \"byg\"\n    ukj = \"ukj\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.KomponentReferanse","title":"<code>KomponentReferanse</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A KomponentReferanse model.</p> <p>The KomponentReferanse model represents a reference to a component in the NRL.</p> <p>Attributes:</p> Name Type Description <code>kodesystemversjon</code> <code>str | None</code> <p>Version of the code system.</p> <code>komponentkodesystem</code> <code>str | None</code> <p>Code system for the component.</p> <code>komponentkodeverdi</code> <code>str | None</code> <p>Value of the component code.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class KomponentReferanse(Parent):\n    \"\"\"A KomponentReferanse model.\n\n    The KomponentReferanse model represents a reference to a component in the NRL.\n\n    Attributes:\n        kodesystemversjon (str | None): Version of the code system.\n        komponentkodesystem (str | None): Code system for the component.\n        komponentkodeverdi (str | None): Value of the component code.\n\n    \"\"\"\n\n    kodesystemversjon: str | None = None\n    komponentkodesystem: str | None = None\n    komponentkodeverdi: str | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Kvalitet","title":"<code>Kvalitet</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A Kvalitet model.</p> <p>Attributes:</p> Name Type Description <code>datafangstmetode</code> <code>DatafangsMetode | None</code> <p>Method of data capture.</p> <code>n\u00f8yaktighet</code> <code>float | None</code> <p>Accuracy of the data capture.</p> <code>datafangstmetode_h\u00f8yde</code> <code>DatafangsMetode | None</code> <p>Method of data capture for height.</p> <code>n\u00f8yaktighet_h\u00f8yde</code> <code>float | None</code> <p>Accuracy of the data capture for height.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class Kvalitet(Parent):\n    \"\"\"A Kvalitet model.\n\n    Attributes:\n        datafangstmetode (DatafangsMetode | None): Method of data capture.\n        n\u00f8yaktighet (float | None): Accuracy of the data capture.\n        datafangstmetode_h\u00f8yde (DatafangsMetode | None): Method of data capture for height.\n        n\u00f8yaktighet_h\u00f8yde (float | None): Accuracy of the data capture for height.\n\n    \"\"\"\n\n    datafangstmetode: DatafangsMetode | None = None\n    n\u00f8yaktighet: float | None = None\n    datafangstmetode_h\u00f8yde: DatafangsMetode | None = None\n    n\u00f8yaktighet_h\u00f8yde: float | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.FeatureProperty","title":"<code>FeatureProperty</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A FeatureProperty abstract base class model.</p> <p>Attributes:</p> Name Type Description <code>feature_type</code> <code>Literal</code> <p>Type of the feature, e.g., \"NrlPunkt</p> <code>status</code> <code>FeatureStatus</code> <p>Status of the feature.</p> <code>komponentident</code> <code>UUID</code> <p>Unique identifier for the component.</p> <code>verifisert_rapporteringsn\u00f8yaktighet</code> <code>Literal</code> <p>Verified reporting accuracy.</p> <code>referanse</code> <code>KomponentReferanse | None</code> <p>Reference to the component, if applicable.</p> <code>navn</code> <code>str | None</code> <p>Name of the feature, if applicable.</p> <code>vertikal_avstand</code> <code>float | None</code> <p>Vertical distance, if applicable.</p> <code>luftfartshindermerking</code> <code>LuftfartsHinderMerking | None</code> <p>Aviation obstacle marking, if applicable.</p> <code>luftfartshinderlyssetting</code> <code>LuftfartsHinderLyssetting | None</code> <p>Aviation obstacle lighting, if applicable.</p> <code>materiale</code> <code>Materiale | None</code> <p>Material of the feature, if applicable.</p> <code>datafangstdato</code> <code>str | None</code> <p>Date of data capture, if applicable.</p> <code>kvalitet</code> <code>Kvalitet | None</code> <p>Quality of the feature, if applicable.</p> <code>informasjon</code> <code>str | None</code> <p>Additional information about the feature, if applicable.</p> <code>h\u00f8ydereferanse</code> <code>H\u00f8ydereferanse | None</code> <p>Height reference, if applicable.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class FeatureProperty(Parent):\n    \"\"\"A FeatureProperty abstract base class model.\n\n    Attributes:\n        feature_type (Literal): Type of the feature, e.g., \"NrlPunkt\n        status (FeatureStatus): Status of the feature.\n        komponentident (UUID): Unique identifier for the component.\n        verifisert_rapporteringsn\u00f8yaktighet (Literal): Verified reporting accuracy.\n        referanse (KomponentReferanse | None): Reference to the component, if applicable.\n        navn (str | None): Name of the feature, if applicable.\n        vertikal_avstand (float | None): Vertical distance, if applicable.\n        luftfartshindermerking (LuftfartsHinderMerking | None): Aviation obstacle marking, if applicable.\n        luftfartshinderlyssetting (LuftfartsHinderLyssetting | None): Aviation obstacle lighting, if applicable.\n        materiale (Materiale | None): Material of the feature, if applicable.\n        datafangstdato (str | None): Date of data capture, if applicable.\n        kvalitet (Kvalitet | None): Quality of the feature, if applicable.\n        informasjon (str | None): Additional information about the feature, if applicable.\n        h\u00f8ydereferanse (H\u00f8ydereferanse | None): Height reference, if applicable.\n\n    \"\"\"\n\n    feature_type: Literal[\"NrlPunkt\", \"NrlMast\", \"NrlLuftspenn\", \"NrlLinje\", \"NrlFlate\"]\n    status: FeatureStatus\n    komponentident: UUID\n    verifisert_rapporteringsn\u00f8yaktighet: Literal[\"20230101_5-1\", \"0\"]\n    referanse: KomponentReferanse | None = None\n    navn: str | None = None\n    vertikal_avstand: float | None = None\n    luftfartshindermerking: LuftfartsHinderMerking | None = None\n    luftfartshinderlyssetting: LuftfartsHinderLyssetting | None = None\n    materiale: Materiale | None = None\n    datafangstdato: str | None = None\n    kvalitet: Kvalitet | None = None\n    informasjon: str | None = None\n    h\u00f8ydereferanse: H\u00f8ydereferanse | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.FlateType","title":"<code>FlateType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for flate types.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class FlateType(str, Enum):\n    \"\"\"An enumeration for flate types.\"\"\"\n\n    kontaktledning = \"kontaktledning\"\n    \"\"\"Contact line type, typically used for overhead power lines.\"\"\"\n\n    trafostasjon = \"trafostasjon\"\n    \"\"\"Transformer station type, typically used for electrical substations.\"\"\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.FlateType.kontaktledning","title":"<code>kontaktledning = 'kontaktledning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Contact line type, typically used for overhead power lines.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.FlateType.trafostasjon","title":"<code>trafostasjon = 'trafostasjon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transformer station type, typically used for electrical substations.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.NrlFlate","title":"<code>NrlFlate</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>FeatureProperty</code></p> <p>A Nrl Flate model.</p> <p>To create a NrlFlate:</p> <pre><code>&gt;&gt;&gt; from uuid import UUID\n&gt;&gt;&gt;\n&gt;&gt;&gt; from nrl_sdk_lib.models import NrlFlate, FeatureStatus, FlateType\n&gt;&gt;&gt;\n&gt;&gt;&gt; nrl_flate = NrlFlate(\n... feature_type=\"NrlFlate\",\n... status=FeatureStatus.eksisterende,\n... komponentident=UUID(\"12345678-1234-5678-1234-567812345678\"),\n... verifisert_rapporteringsn\u00f8yaktighet=\"20230101_5-1\",\n... flate_type=FlateType.trafostasjon,\n... )\n&gt;&gt;&gt; # Do something with nrl_flate, e.g. add it to a feature collection\n\n</code></pre> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class NrlFlate(FeatureProperty):\n    \"\"\"A Nrl Flate model.\n\n    To create a NrlFlate:\n    ```python\n    &gt;&gt;&gt; from uuid import UUID\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; from nrl_sdk_lib.models import NrlFlate, FeatureStatus, FlateType\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; nrl_flate = NrlFlate(\n    ... feature_type=\"NrlFlate\",\n    ... status=FeatureStatus.eksisterende,\n    ... komponentident=UUID(\"12345678-1234-5678-1234-567812345678\"),\n    ... verifisert_rapporteringsn\u00f8yaktighet=\"20230101_5-1\",\n    ... flate_type=FlateType.trafostasjon,\n    ... )\n    &gt;&gt;&gt; # Do something with nrl_flate, e.g. add it to a feature collection\n\n    ```\n    \"\"\"\n\n    flate_type: FlateType\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.NrlLinje","title":"<code>NrlLinje</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>FeatureProperty</code></p> <p>A Nrl Linje model.</p> <p>Attributes:</p> Name Type Description <code>linje_type</code> <code>str</code> <p>Type of the line, e.g., \"h\u00f8gspent</p> <code>anleggsbredde</code> <code>float | None</code> <p>Width of the facility, if applicable.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class NrlLinje(FeatureProperty):\n    \"\"\"A Nrl Linje model.\n\n    Attributes:\n        linje_type (str): Type of the line, e.g., \"h\u00f8gspent\n        anleggsbredde (float | None): Width of the facility, if applicable.\n\n    \"\"\"\n\n    linje_type: str\n    anleggsbredde: float | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType","title":"<code>LuftspennType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for luftspenn types.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class LuftspennType(str, Enum):\n    \"\"\"An enumeration for luftspenn types.\"\"\"\n\n    annet = \"annet\"\n    \"\"\"Generic type for unspecified air spans.\"\"\"\n\n    bardun = \"bardun\"\n    \"\"\"Type for guyed spans, typically used for supporting structures.\"\"\"\n\n    gondolbane = \"gondolbane\"\n    \"\"\"Type for gondola cable cars, typically used in ski resorts or mountainous areas.\"\"\"\n\n    ekom = \"ekom\"\n    \"\"\"Type for communication lines, typically used for telecommunication or data transmission.\"\"\"\n\n    h\u00f8gspent = \"h\u00f8gspent\"\n    \"\"\"Type for high-voltage power lines, typically used for electrical transmission.\"\"\"\n\n    kontaktledning = \"kontaktledning\"\n    \"\"\"Type for contact lines, typically used in railways or tram systems.\"\"\"\n\n    lavspent = \"lavspent\"\n    \"\"\"Type for low-voltage power lines, typically used for local electrical distribution.\"\"\"\n\n    transmisjon = \"transmisjon\"\n    \"\"\"Type for transmission lines, typically used for long-distance electrical transmission.\"\"\"\n\n    regional = \"regional\"\n    \"\"\"Type for regional lines, typically used for medium-voltage electrical distribution.\"\"\"\n\n    l\u00f8ypestreng = \"l\u00f8ypestreng\"\n    \"\"\"Type for ski lift lines, typically used in ski resorts.\"\"\"\n\n    skitrekk = \"skitrekk\"\n    \"\"\"Type for ski tow lines, typically used in ski resorts.\"\"\"\n\n    stolheis = \"stolheis\"\n    \"\"\"Type for chairlift lines, typically used in ski resorts.\"\"\"\n\n    taubane = \"taubane\"\n    \"\"\"Type for cable car lines, typically used in ski resorts or mountainous areas.\"\"\"\n\n    vaier = \"vaier\"\n    \"\"\"Type for cable lines, typically used for various purposes including ski lifts and gondolas.\"\"\"\n\n    zipline = \"zipline\"\n    \"\"\"Type for zip lines, typically used for recreational activities.\"\"\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.annet","title":"<code>annet = 'annet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Generic type for unspecified air spans.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.bardun","title":"<code>bardun = 'bardun'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for guyed spans, typically used for supporting structures.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.gondolbane","title":"<code>gondolbane = 'gondolbane'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for gondola cable cars, typically used in ski resorts or mountainous areas.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.ekom","title":"<code>ekom = 'ekom'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for communication lines, typically used for telecommunication or data transmission.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.h\u00f8gspent","title":"<code>h\u00f8gspent = 'h\u00f8gspent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for high-voltage power lines, typically used for electrical transmission.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.kontaktledning","title":"<code>kontaktledning = 'kontaktledning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for contact lines, typically used in railways or tram systems.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.lavspent","title":"<code>lavspent = 'lavspent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for low-voltage power lines, typically used for local electrical distribution.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.transmisjon","title":"<code>transmisjon = 'transmisjon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for transmission lines, typically used for long-distance electrical transmission.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.regional","title":"<code>regional = 'regional'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for regional lines, typically used for medium-voltage electrical distribution.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.l\u00f8ypestreng","title":"<code>l\u00f8ypestreng = 'l\u00f8ypestreng'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for ski lift lines, typically used in ski resorts.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.skitrekk","title":"<code>skitrekk = 'skitrekk'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for ski tow lines, typically used in ski resorts.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.stolheis","title":"<code>stolheis = 'stolheis'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for chairlift lines, typically used in ski resorts.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.taubane","title":"<code>taubane = 'taubane'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for cable car lines, typically used in ski resorts or mountainous areas.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.vaier","title":"<code>vaier = 'vaier'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for cable lines, typically used for various purposes including ski lifts and gondolas.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.LuftspennType.zipline","title":"<code>zipline = 'zipline'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for zip lines, typically used for recreational activities.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.NrlLuftspenn","title":"<code>NrlLuftspenn</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>FeatureProperty</code></p> <p>A Nrl Luftspenn model.</p> <p>Attributes:</p> Name Type Description <code>luftspenn_type</code> <code>LuftspennType</code> <p>Type of the air span.</p> <code>anleggsbredde</code> <code>float | None</code> <p>Width of the facility, if applicable.</p> <code>friseilingsh\u00f8yde</code> <code>float | None</code> <p>Height of the free span, if applicable.</p> <code>nrl_mast</code> <code>list[UUID] | None</code> <p>List of UUIDs for associated Nrl Mast, if applicable.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class NrlLuftspenn(FeatureProperty):\n    \"\"\"A Nrl Luftspenn model.\n\n    Attributes:\n        luftspenn_type (LuftspennType): Type of the air span.\n        anleggsbredde (float | None): Width of the facility, if applicable.\n        friseilingsh\u00f8yde (float | None): Height of the free span,\n            if applicable.\n        nrl_mast (list[UUID] | None): List of UUIDs for associated Nrl Mast, if applicable.\n\n    \"\"\"\n\n    luftspenn_type: LuftspennType\n    anleggsbredde: float | None = None\n    friseilingsh\u00f8yde: float | None = None\n    nrl_mast: list[UUID] | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType","title":"<code>MastType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enumeration for mast types.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class MastType(str, Enum):\n    \"\"\"An enumeration for mast types.\"\"\"\n\n    annet = \"annet\"\n    \"\"\"Generic type for unspecified masts.\"\"\"\n\n    belysningsmast = \"belysningsmast\"\n    \"\"\"Type for lighting masts, typically used for street or area lighting.\"\"\"\n\n    ekommast = \"ekommast\"\n    \"\"\"Type for communication masts, typically used for telecommunication or data transmission.\"\"\"\n\n    h\u00f8gspentmast = \"h\u00f8gspentmast\"\n    \"\"\"Type for high-voltage masts, typically used for electrical transmission.\"\"\"\n\n    kontaktledningsmast = \"kontaktledningsmast\"\n    \"\"\"Type for contact line masts, typically used in railways or tram systems.\"\"\"\n\n    lavspentmast = \"lavspentmast\"\n    \"\"\"Type for low-voltage masts, typically used for local electrical distribution.\"\"\"\n\n    transmisjonmast = \"transmisjonmast\"\n    \"\"\"Type for transmission masts, typically used for long-distance electrical transmission.\"\"\"\n\n    regionalmast = \"regionalmast\"\n    \"\"\"Type for regional masts, typically used for medium-voltage electrical distribution.\"\"\"\n\n    m\u00e5lemast = \"m\u00e5lemast\"\n    \"\"\"Type for measurement masts, typically used for environmental or structural monitoring.\"\"\"\n\n    radiomast = \"radiomast\"\n    \"\"\"Type for radio masts, typically used for broadcasting or communication.\"\"\"\n\n    taubanemast = \"taubanemast\"\n    \"\"\"Type for cable car masts, typically used in ski resorts or mountainous areas.\"\"\"\n\n    telemast = \"telemast\"\n    \"\"\"Type for telecommunication masts, typically used for mobile or fixed-line communication.\"\"\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.annet","title":"<code>annet = 'annet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Generic type for unspecified masts.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.belysningsmast","title":"<code>belysningsmast = 'belysningsmast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for lighting masts, typically used for street or area lighting.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.ekommast","title":"<code>ekommast = 'ekommast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for communication masts, typically used for telecommunication or data transmission.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.h\u00f8gspentmast","title":"<code>h\u00f8gspentmast = 'h\u00f8gspentmast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for high-voltage masts, typically used for electrical transmission.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.kontaktledningsmast","title":"<code>kontaktledningsmast = 'kontaktledningsmast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for contact line masts, typically used in railways or tram systems.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.lavspentmast","title":"<code>lavspentmast = 'lavspentmast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for low-voltage masts, typically used for local electrical distribution.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.transmisjonmast","title":"<code>transmisjonmast = 'transmisjonmast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for transmission masts, typically used for long-distance electrical transmission.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.regionalmast","title":"<code>regionalmast = 'regionalmast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for regional masts, typically used for medium-voltage electrical distribution.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.m\u00e5lemast","title":"<code>m\u00e5lemast = 'm\u00e5lemast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for measurement masts, typically used for environmental or structural monitoring.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.radiomast","title":"<code>radiomast = 'radiomast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for radio masts, typically used for broadcasting or communication.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.taubanemast","title":"<code>taubanemast = 'taubanemast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for cable car masts, typically used in ski resorts or mountainous areas.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.MastType.telemast","title":"<code>telemast = 'telemast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type for telecommunication masts, typically used for mobile or fixed-line communication.</p>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.NrlMast","title":"<code>NrlMast</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>FeatureProperty</code></p> <p>A Nrl Mast model.</p> <p>Attributes:</p> Name Type Description <code>mast_type</code> <code>MastType</code> <p>Type of the mast.</p> <code>horisontal_avstand</code> <code>float | None</code> <p>Horizontal distance to the next mast, if applicable.</p> <code>nrl_luftspenn</code> <code>list[UUID] | None</code> <p>List of UUIDs for associated Nrl Luftspenn, if applicable.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class NrlMast(FeatureProperty):\n    \"\"\"A Nrl Mast model.\n\n    Attributes:\n        mast_type (MastType): Type of the mast.\n        horisontal_avstand (float | None): Horizontal distance to the next mast, if applicable.\n        nrl_luftspenn (list[UUID] | None): List of UUIDs for associated Nrl Luftspenn, if applicable.\n\n    \"\"\"\n\n    mast_type: MastType\n    horisontal_avstand: float | None = None\n    nrl_luftspenn: list[UUID] | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.NrlPunkt","title":"<code>NrlPunkt</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>FeatureProperty</code></p> <p>A Nrl Punkt model.</p> <p>Attributes:</p> Name Type Description <code>punkt_type</code> <code>PunktType</code> <p>Type of the point.</p> <code>horisontal_avstand</code> <code>float | None</code> <p>Horizontal distance to the next point, if applicable.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class NrlPunkt(FeatureProperty):\n    \"\"\"A Nrl Punkt model.\n\n    Attributes:\n        punkt_type (PunktType): Type of the point.\n        horisontal_avstand (float | None): Horizontal distance to the next point, if applicable.\n\n    \"\"\"\n\n    punkt_type: PunktType\n    horisontal_avstand: float | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.Feature","title":"<code>Feature</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A Feature model.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the feature, typically \"Feature\".</p> <code>geometry</code> <code>Point | Polygon | LineString</code> <p>The geometry of the feature, which can be a Point, Polygon, or LineString.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class Feature(Parent):\n    \"\"\"A Feature model.\n\n    Attributes:\n        type (str): The type of the feature, typically \"Feature\".\n        geometry (Point | Polygon | LineString): The geometry of the feature, which can be\n            a Point, Polygon, or LineString.\n\n    \"\"\"\n\n    type: str = \"Feature\"\n    geometry: Point | Polygon | LineString\n    properties: NrlPunkt | NrlMast | NrlLuftspenn | NrlLinje | NrlFlate\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.feature_collection.FeatureCollection","title":"<code>FeatureCollection</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>Parent</code></p> <p>A FeatureCollection model.</p> <p>The FeatureCollection model represents a collection of geographic features with associated geometries and properties.</p> <p>How to create a FeatureCollection from a JSON file:</p> <pre><code>&gt;&gt;&gt; from pydantic import ValidationError\n&gt;&gt;&gt; from nrl_sdk_lib.models import FeatureCollection\n&gt;&gt;&gt;\n&gt;&gt;&gt; testfile_path = \"tests/files/Eksempelfil_NRLRapportering-1.0.1.json\"\n&gt;&gt;&gt; with open(testfile_path) as file:\n...     data = file.read()\n&gt;&gt;&gt;\n&gt;&gt;&gt; try:\n...     feature_collection = FeatureCollection.model_validate_json(data)\n... except ValidationError as e:\n...     print(e.errors())\n\n</code></pre> <p>How to create a FeatureCollection programmatically:</p> <pre><code>&gt;&gt;&gt; from uuid import UUID\n&gt;&gt;&gt;\n&gt;&gt;&gt; from nrl_sdk_lib.models import (\n...     CrsProperties,\n...     Feature,\n...     Point,\n...     NrlFlate,\n...     FeatureStatus,\n...     FlateType,\n...     FeatureCollection,\n...     Crs,\n...     )\n&gt;&gt;&gt;\n&gt;&gt;&gt; nrl_flate = NrlFlate(\n...     feature_type=\"NrlFlate\",\n...     status=FeatureStatus.eksisterende,\n...     komponentident=UUID(\"12345678-1234-5678-1234-567812345678\"),\n...     verifisert_rapporteringsn\u00f8yaktighet=\"20230101_5-1\",\n...     flate_type=FlateType.trafostasjon,\n... )\n&gt;&gt;&gt;\n&gt;&gt;&gt; feature = Feature(\n...     type=\"Feature\",\n...     geometry=Point(type=\"Point\", coordinates=[10.0, 59.0]),\n...     properties=nrl_flate,\n... )\n&gt;&gt;&gt;\n&gt;&gt;&gt; feature_collection = FeatureCollection(\n...     crs=Crs(properties=CrsProperties(name=\"EPSG:4326\")),\n...     features=[feature],\n... )\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Do something with feature_collection, e.g. serialize it to JSON:\n&gt;&gt;&gt; # print(feature_collection.model_dump_json(indent=2))\n</code></pre> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the collection, typically \"FeatureCollection\".</p> <code>crs</code> <code>Crs</code> <p>The coordinate reference system of the features in the collection.</p> <code>features</code> <code>list[Feature]</code> <p>A list of features in the collection, each with its own geometry and properties.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/feature_collection.py</code> <pre><code>class FeatureCollection(Parent):\n    \"\"\"A FeatureCollection model.\n\n    The FeatureCollection model represents a collection of geographic features with associated geometries and properties.\n\n    How to create a FeatureCollection from a JSON file:\n    ```python\n    &gt;&gt;&gt; from pydantic import ValidationError\n    &gt;&gt;&gt; from nrl_sdk_lib.models import FeatureCollection\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; testfile_path = \"tests/files/Eksempelfil_NRLRapportering-1.0.1.json\"\n    &gt;&gt;&gt; with open(testfile_path) as file:\n    ...     data = file.read()\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; try:\n    ...     feature_collection = FeatureCollection.model_validate_json(data)\n    ... except ValidationError as e:\n    ...     print(e.errors())\n\n    ```\n\n    How to create a FeatureCollection programmatically:\n    ```python\n    &gt;&gt;&gt; from uuid import UUID\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; from nrl_sdk_lib.models import (\n    ...     CrsProperties,\n    ...     Feature,\n    ...     Point,\n    ...     NrlFlate,\n    ...     FeatureStatus,\n    ...     FlateType,\n    ...     FeatureCollection,\n    ...     Crs,\n    ...     )\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; nrl_flate = NrlFlate(\n    ...     feature_type=\"NrlFlate\",\n    ...     status=FeatureStatus.eksisterende,\n    ...     komponentident=UUID(\"12345678-1234-5678-1234-567812345678\"),\n    ...     verifisert_rapporteringsn\u00f8yaktighet=\"20230101_5-1\",\n    ...     flate_type=FlateType.trafostasjon,\n    ... )\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; feature = Feature(\n    ...     type=\"Feature\",\n    ...     geometry=Point(type=\"Point\", coordinates=[10.0, 59.0]),\n    ...     properties=nrl_flate,\n    ... )\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; feature_collection = FeatureCollection(\n    ...     crs=Crs(properties=CrsProperties(name=\"EPSG:4326\")),\n    ...     features=[feature],\n    ... )\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; # Do something with feature_collection, e.g. serialize it to JSON:\n    &gt;&gt;&gt; # print(feature_collection.model_dump_json(indent=2))\n    ```\n\n    Attributes:\n        type (str): The type of the collection, typically \"FeatureCollection\".\n        crs (Crs): The coordinate reference system of the features in the collection.\n        features (list[Feature]): A list of features in the collection, each with its own geometry and properties.\n\n    \"\"\"\n\n    type: str = \"FeatureCollection\"\n    crs: Crs\n    features: list[Feature]\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.job","title":"<code>nrl_sdk_lib.models.job</code>","text":"<p>Module for job model.</p>"},{"location":"reference/#nrl_sdk_lib.models.job.OperationType","title":"<code>OperationType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for operation types.</p> <p>This enum defines the types of operations that can be performed on a job.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/job.py</code> <pre><code>class OperationType(str, Enum):\n    \"\"\"Enum for operation types.\n\n    This enum defines the types of operations that can be performed on a job.\n    \"\"\"\n\n    VALIDATE = \"validate\"\n    \"\"\"Operation for validating data.\"\"\"\n\n    REPORT = \"report\"\n    \"\"\"Operation for reporting data.\"\"\"\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.job.OperationType.VALIDATE","title":"<code>VALIDATE = 'validate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Operation for validating data.</p>"},{"location":"reference/#nrl_sdk_lib.models.job.OperationType.REPORT","title":"<code>REPORT = 'report'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Operation for reporting data.</p>"},{"location":"reference/#nrl_sdk_lib.models.job.Job","title":"<code>Job</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A job model.</p> <p>The job model represents a processing task that can be validated or reported.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID4</code> <p>Unique identifier for the job.</p> <code>status</code> <code>str</code> <p>Current status of the job.</p> <code>content_type</code> <code>str</code> <p>Type of content being processed in the job.</p> <code>operation</code> <code>OperationType</code> <p>Type of operation being performed in the job.</p> <code>data_id</code> <code>UUID4</code> <p>Identifier for the data associated with the job.</p> <code>created_at</code> <code>datetime</code> <p>Timestamp when the job was created.</p> <code>created_by_user</code> <code>str</code> <p>Username of the user who created the job.</p> <code>created_for_org</code> <code>str</code> <p>Organization for which the job was created.</p> <code>completed_at</code> <code>datetime | None</code> <p>Timestamp when the job was completed, if applicable.</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/job.py</code> <pre><code>class Job(BaseModel):\n    \"\"\"A job model.\n\n    The job model represents a processing task that can be validated or reported.\n\n    Attributes:\n        id (UUID4): Unique identifier for the job.\n        status (str): Current status of the job.\n        content_type (str): Type of content being processed in the job.\n        operation (OperationType): Type of operation being performed in the job.\n        data_id (UUID4): Identifier for the data associated with the job.\n        created_at (datetime): Timestamp when the job was created.\n        created_by_user (str): Username of the user who created the job.\n        created_for_org (str): Organization for which the job was created.\n        completed_at (datetime | None): Timestamp when the job was completed, if applicable.\n\n    \"\"\"\n\n    model_config = ConfigDict(\n        from_attributes=True,\n        alias_generator=to_camel,\n        populate_by_name=True,\n    )\n\n    id: UUID4\n    status: str\n    content_type: str\n    operation: OperationType\n    data_id: UUID4\n    created_at: datetime\n    created_by_user: str\n    created_for_org: str\n    completed_at: datetime | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.result","title":"<code>nrl_sdk_lib.models.result</code>","text":"<p>Module for response message model.</p>"},{"location":"reference/#nrl_sdk_lib.models.result.ResultError","title":"<code>ResultError</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A result error model.</p> <p>The result error model represents an error encountered during a validation or reporting process.</p> <p>Attributes:</p> Name Type Description <code>reason</code> <code>str</code> <p>A description of the error encountered.</p> <code>komponent_id</code> <code>UUID | None</code> <p>An optional identifier for the component associated with the error.</p> <code>id</code> <code>UUID | None</code> <p>A unique identifier for the error, automatically generated if not provided</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/result.py</code> <pre><code>class ResultError(BaseModel):\n    \"\"\"A result error model.\n\n    The result error model represents an error encountered during a validation or reporting process.\n\n    Attributes:\n        reason (str): A description of the error encountered.\n        komponent_id (UUID | None): An optional identifier for the component associated with the error.\n        id (UUID | None): A unique identifier for the error, automatically generated if not provided\n\n    \"\"\"\n\n    model_config = ConfigDict(\n        from_attributes=True,\n        alias_generator=to_camel,\n        populate_by_name=True,\n    )\n\n    reason: str\n    komponent_id: UUID | None = None\n</code></pre>"},{"location":"reference/#nrl_sdk_lib.models.result.Result","title":"<code>Result</code>  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A result model.</p> <p>The result model represents the outcome of a validation or reporting process.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <p>The status of the result, e.g., \"success\" or \"</p> <code>stage</code> <code>int</code> <p>The stage of the process, typically an integer indicating the step in the workflow.</p> <code>job_id</code> <code>UUID</code> <p>The unique identifier of the job associated with this result.</p> <code>type</code> <code>str | None</code> <p>The type of result, if applicable.</p> <code>errors</code> <code>list[ResultError] | None</code> <p>A list of errors encountered during the process or an empty list if there are no errors.</p> <code>id</code> <code>UUID | None</code> <p>A unique identifier for the result, automatically generated if not provided</p> Source code in <code>nrl-sdk-lib/src/nrl_sdk_lib/models/result.py</code> <pre><code>class Result(BaseModel):\n    \"\"\"A result model.\n\n    The result model represents the outcome of a validation or reporting process.\n\n    Attributes:\n        status (str): The status of the result, e.g., \"success\" or \"\n        stage (int): The stage of the process, typically an integer indicating the step in the workflow.\n        job_id (UUID): The unique identifier of the job associated with this result.\n        type (str | None): The type of result, if applicable.\n        errors (list[ResultError] | None): A list of errors encountered during the process\n            or an empty list if there are no errors.\n        id (UUID | None): A unique identifier for the result, automatically generated if not provided\n\n    \"\"\"\n\n    model_config = ConfigDict(\n        from_attributes=True,\n        alias_generator=to_camel,\n        populate_by_name=True,\n    )\n\n    status: str\n    stage: int  # Should be enum.\n    job_id: UUID\n    type: str | None = None\n    errors: list[ResultError] | None = Field(default_factory=list)\n    id: UUID | None = Field(default_factory=uuid4)\n</code></pre>"}]}